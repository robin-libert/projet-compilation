Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> TXT
Rule 2     programme -> TXT programme
Rule 3     programme -> dumboBloc
Rule 4     programme -> dumboBloc programme
Rule 5     dumboBloc -> BLOC_BEGIN expressionList BLOC_END
Rule 6     dumboBloc -> BLOC_BEGIN BLOC_END
Rule 7     expressionList -> expression DOT_COMMA
Rule 8     expressionList -> expression DOT_COMMA expressionList
Rule 9     expression -> variableN ASSIGNEMENT globalExpression
Rule 10    expression -> variableN ASSIGNEMENT list
Rule 11    expression -> PRINT globalExpression
Rule 12    expression -> FOR variableN IN list DO expressionList ENDFOR
Rule 13    expression -> FOR variableN IN variable DO expressionList ENDFOR
Rule 14    expression -> IF globalExpression DO expressionList ENDIF
Rule 15    expression -> IF globalExpression DO expressionList ELSE expressionList ENDIF
Rule 16    globalExpression -> string
Rule 17    globalExpression -> integerVar
Rule 18    globalExpression -> variable
Rule 19    globalExpression -> booleanVar
Rule 20    globalExpression -> globalExpression BINOPERATOR globalExpression
Rule 21    globalExpression -> globalExpression OPERATOR globalExpression
Rule 22    globalExpression -> globalExpression ADD_OP globalExpression
Rule 23    globalExpression -> globalExpression MUL_OP globalExpression
Rule 24    globalExpression -> globalExpression DOT globalExpression
Rule 25    list -> PAR_OUVR stringListInterior PAR_FERM
Rule 26    list -> PAR_OUVR integerListInterior PAR_FERM
Rule 27    stringListInterior -> string
Rule 28    stringListInterior -> string COMMA stringListInterior
Rule 29    integerListInterior -> integerVar
Rule 30    integerListInterior -> integerVar COMMA integerListInterior
Rule 31    variable -> VAR
Rule 32    variableN -> VAR
Rule 33    string -> APO STRING APO
Rule 34    integerVar -> INTEGER
Rule 35    booleanVar -> BOOLEAN

Terminals, with rules where they appear

ADD_OP               : 22
APO                  : 33 33
ASSIGNEMENT          : 9 10
BINOPERATOR          : 20
BLOC_BEGIN           : 5 6
BLOC_END             : 5 6
BOOLEAN              : 35
COMMA                : 28 30
DO                   : 12 13 14 15
DOT                  : 24
DOT_COMMA            : 7 8
ELSE                 : 15
ENDFOR               : 12 13
ENDIF                : 14 15
FOR                  : 12 13
IF                   : 14 15
IN                   : 12 13
INTEGER              : 34
MUL_OP               : 23
OPERATOR             : 21
PAR_FERM             : 25 26
PAR_OUVR             : 25 26
PRINT                : 11
STRING               : 33
TXT                  : 1 2
VAR                  : 31 32
error                : 

Nonterminals, with rules where they appear

booleanVar           : 19
dumboBloc            : 3 4
expression           : 7 8
expressionList       : 5 8 12 13 14 15 15
globalExpression     : 9 11 14 15 20 20 21 21 22 22 23 23 24 24
integerListInterior  : 26 30
integerVar           : 17 29 30
list                 : 10 12
programme            : 2 4 0
string               : 16 27 28
stringListInterior   : 25 28
variable             : 13 18
variableN            : 9 10 12 13

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . TXT
    (2) programme -> . TXT programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (5) dumboBloc -> . BLOC_BEGIN expressionList BLOC_END
    (6) dumboBloc -> . BLOC_BEGIN BLOC_END

    TXT             shift and go to state 2
    BLOC_BEGIN      shift and go to state 1

    dumboBloc                      shift and go to state 4
    programme                      shift and go to state 3

state 1

    (5) dumboBloc -> BLOC_BEGIN . expressionList BLOC_END
    (6) dumboBloc -> BLOC_BEGIN . BLOC_END
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    BLOC_END        shift and go to state 8
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    expressionList                 shift and go to state 6
    variableN                      shift and go to state 12

state 2

    (1) programme -> TXT .
    (2) programme -> TXT . programme
    (1) programme -> . TXT
    (2) programme -> . TXT programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (5) dumboBloc -> . BLOC_BEGIN expressionList BLOC_END
    (6) dumboBloc -> . BLOC_BEGIN BLOC_END

    $end            reduce using rule 1 (programme -> TXT .)
    TXT             shift and go to state 2
    BLOC_BEGIN      shift and go to state 1

    dumboBloc                      shift and go to state 4
    programme                      shift and go to state 13

state 3

    (0) S' -> programme .



state 4

    (3) programme -> dumboBloc .
    (4) programme -> dumboBloc . programme
    (1) programme -> . TXT
    (2) programme -> . TXT programme
    (3) programme -> . dumboBloc
    (4) programme -> . dumboBloc programme
    (5) dumboBloc -> . BLOC_BEGIN expressionList BLOC_END
    (6) dumboBloc -> . BLOC_BEGIN BLOC_END

    $end            reduce using rule 3 (programme -> dumboBloc .)
    TXT             shift and go to state 2
    BLOC_BEGIN      shift and go to state 1

    dumboBloc                      shift and go to state 4
    programme                      shift and go to state 14

state 5

    (7) expressionList -> expression . DOT_COMMA
    (8) expressionList -> expression . DOT_COMMA expressionList

    DOT_COMMA       shift and go to state 15


state 6

    (5) dumboBloc -> BLOC_BEGIN expressionList . BLOC_END

    BLOC_END        shift and go to state 16


state 7

    (32) variableN -> VAR .

    ASSIGNEMENT     reduce using rule 32 (variableN -> VAR .)
    IN              reduce using rule 32 (variableN -> VAR .)


state 8

    (6) dumboBloc -> BLOC_BEGIN BLOC_END .

    TXT             reduce using rule 6 (dumboBloc -> BLOC_BEGIN BLOC_END .)
    BLOC_BEGIN      reduce using rule 6 (dumboBloc -> BLOC_BEGIN BLOC_END .)
    $end            reduce using rule 6 (dumboBloc -> BLOC_BEGIN BLOC_END .)


state 9

    (14) expression -> IF . globalExpression DO expressionList ENDIF
    (15) expression -> IF . globalExpression DO expressionList ELSE expressionList ENDIF
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    variable                       shift and go to state 17
    string                         shift and go to state 21
    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 19
    integerVar                     shift and go to state 25

state 10

    (11) expression -> PRINT . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 26
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 11

    (12) expression -> FOR . variableN IN list DO expressionList ENDFOR
    (13) expression -> FOR . variableN IN variable DO expressionList ENDFOR
    (32) variableN -> . VAR

    VAR             shift and go to state 7

    variableN                      shift and go to state 27

state 12

    (9) expression -> variableN . ASSIGNEMENT globalExpression
    (10) expression -> variableN . ASSIGNEMENT list

    ASSIGNEMENT     shift and go to state 28


state 13

    (2) programme -> TXT programme .

    $end            reduce using rule 2 (programme -> TXT programme .)


state 14

    (4) programme -> dumboBloc programme .

    $end            reduce using rule 4 (programme -> dumboBloc programme .)


state 15

    (7) expressionList -> expression DOT_COMMA .
    (8) expressionList -> expression DOT_COMMA . expressionList
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    ENDFOR          reduce using rule 7 (expressionList -> expression DOT_COMMA .)
    BLOC_END        reduce using rule 7 (expressionList -> expression DOT_COMMA .)
    ENDIF           reduce using rule 7 (expressionList -> expression DOT_COMMA .)
    ELSE            reduce using rule 7 (expressionList -> expression DOT_COMMA .)
    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    expressionList                 shift and go to state 29
    variableN                      shift and go to state 12

state 16

    (5) dumboBloc -> BLOC_BEGIN expressionList BLOC_END .

    TXT             reduce using rule 5 (dumboBloc -> BLOC_BEGIN expressionList BLOC_END .)
    BLOC_BEGIN      reduce using rule 5 (dumboBloc -> BLOC_BEGIN expressionList BLOC_END .)
    $end            reduce using rule 5 (dumboBloc -> BLOC_BEGIN expressionList BLOC_END .)


state 17

    (18) globalExpression -> variable .

    BINOPERATOR     reduce using rule 18 (globalExpression -> variable .)
    OPERATOR        reduce using rule 18 (globalExpression -> variable .)
    ADD_OP          reduce using rule 18 (globalExpression -> variable .)
    MUL_OP          reduce using rule 18 (globalExpression -> variable .)
    DOT             reduce using rule 18 (globalExpression -> variable .)
    DO              reduce using rule 18 (globalExpression -> variable .)
    DOT_COMMA       reduce using rule 18 (globalExpression -> variable .)


state 18

    (33) string -> APO . STRING APO

    STRING          shift and go to state 30


state 19

    (14) expression -> IF globalExpression . DO expressionList ENDIF
    (15) expression -> IF globalExpression . DO expressionList ELSE expressionList ENDIF
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    DO              shift and go to state 34
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32
    ADD_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DOT             shift and go to state 31


state 20

    (34) integerVar -> INTEGER .

    DO              reduce using rule 34 (integerVar -> INTEGER .)
    BINOPERATOR     reduce using rule 34 (integerVar -> INTEGER .)
    OPERATOR        reduce using rule 34 (integerVar -> INTEGER .)
    ADD_OP          reduce using rule 34 (integerVar -> INTEGER .)
    MUL_OP          reduce using rule 34 (integerVar -> INTEGER .)
    DOT             reduce using rule 34 (integerVar -> INTEGER .)
    DOT_COMMA       reduce using rule 34 (integerVar -> INTEGER .)
    COMMA           reduce using rule 34 (integerVar -> INTEGER .)
    PAR_FERM        reduce using rule 34 (integerVar -> INTEGER .)


state 21

    (16) globalExpression -> string .

    BINOPERATOR     reduce using rule 16 (globalExpression -> string .)
    OPERATOR        reduce using rule 16 (globalExpression -> string .)
    ADD_OP          reduce using rule 16 (globalExpression -> string .)
    MUL_OP          reduce using rule 16 (globalExpression -> string .)
    DOT             reduce using rule 16 (globalExpression -> string .)
    DO              reduce using rule 16 (globalExpression -> string .)
    DOT_COMMA       reduce using rule 16 (globalExpression -> string .)


state 22

    (31) variable -> VAR .

    BINOPERATOR     reduce using rule 31 (variable -> VAR .)
    OPERATOR        reduce using rule 31 (variable -> VAR .)
    ADD_OP          reduce using rule 31 (variable -> VAR .)
    MUL_OP          reduce using rule 31 (variable -> VAR .)
    DOT             reduce using rule 31 (variable -> VAR .)
    DO              reduce using rule 31 (variable -> VAR .)
    DOT_COMMA       reduce using rule 31 (variable -> VAR .)


state 23

    (35) booleanVar -> BOOLEAN .

    BINOPERATOR     reduce using rule 35 (booleanVar -> BOOLEAN .)
    OPERATOR        reduce using rule 35 (booleanVar -> BOOLEAN .)
    ADD_OP          reduce using rule 35 (booleanVar -> BOOLEAN .)
    MUL_OP          reduce using rule 35 (booleanVar -> BOOLEAN .)
    DOT             reduce using rule 35 (booleanVar -> BOOLEAN .)
    DO              reduce using rule 35 (booleanVar -> BOOLEAN .)
    DOT_COMMA       reduce using rule 35 (booleanVar -> BOOLEAN .)


state 24

    (19) globalExpression -> booleanVar .

    BINOPERATOR     reduce using rule 19 (globalExpression -> booleanVar .)
    OPERATOR        reduce using rule 19 (globalExpression -> booleanVar .)
    ADD_OP          reduce using rule 19 (globalExpression -> booleanVar .)
    MUL_OP          reduce using rule 19 (globalExpression -> booleanVar .)
    DOT             reduce using rule 19 (globalExpression -> booleanVar .)
    DO              reduce using rule 19 (globalExpression -> booleanVar .)
    DOT_COMMA       reduce using rule 19 (globalExpression -> booleanVar .)


state 25

    (17) globalExpression -> integerVar .

    BINOPERATOR     reduce using rule 17 (globalExpression -> integerVar .)
    OPERATOR        reduce using rule 17 (globalExpression -> integerVar .)
    ADD_OP          reduce using rule 17 (globalExpression -> integerVar .)
    MUL_OP          reduce using rule 17 (globalExpression -> integerVar .)
    DOT             reduce using rule 17 (globalExpression -> integerVar .)
    DO              reduce using rule 17 (globalExpression -> integerVar .)
    DOT_COMMA       reduce using rule 17 (globalExpression -> integerVar .)


state 26

    (11) expression -> PRINT globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    DOT_COMMA       reduce using rule 11 (expression -> PRINT globalExpression .)
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32
    ADD_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DOT             shift and go to state 31


state 27

    (12) expression -> FOR variableN . IN list DO expressionList ENDFOR
    (13) expression -> FOR variableN . IN variable DO expressionList ENDFOR

    IN              shift and go to state 37


state 28

    (9) expression -> variableN ASSIGNEMENT . globalExpression
    (10) expression -> variableN ASSIGNEMENT . list
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (25) list -> . PAR_OUVR stringListInterior PAR_FERM
    (26) list -> . PAR_OUVR integerListInterior PAR_FERM
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    PAR_OUVR        shift and go to state 38
    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    list                           shift and go to state 40
    variable                       shift and go to state 17
    string                         shift and go to state 21
    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 39
    integerVar                     shift and go to state 25

state 29

    (8) expressionList -> expression DOT_COMMA expressionList .

    ENDFOR          reduce using rule 8 (expressionList -> expression DOT_COMMA expressionList .)
    BLOC_END        reduce using rule 8 (expressionList -> expression DOT_COMMA expressionList .)
    ENDIF           reduce using rule 8 (expressionList -> expression DOT_COMMA expressionList .)
    ELSE            reduce using rule 8 (expressionList -> expression DOT_COMMA expressionList .)


state 30

    (33) string -> APO STRING . APO

    APO             shift and go to state 41


state 31

    (24) globalExpression -> globalExpression DOT . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 42
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 32

    (21) globalExpression -> globalExpression OPERATOR . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 43
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 33

    (23) globalExpression -> globalExpression MUL_OP . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 44
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 34

    (14) expression -> IF globalExpression DO . expressionList ENDIF
    (15) expression -> IF globalExpression DO . expressionList ELSE expressionList ENDIF
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    expressionList                 shift and go to state 45
    variableN                      shift and go to state 12

state 35

    (20) globalExpression -> globalExpression BINOPERATOR . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 46
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 36

    (22) globalExpression -> globalExpression ADD_OP . globalExpression
    (16) globalExpression -> . string
    (17) globalExpression -> . integerVar
    (18) globalExpression -> . variable
    (19) globalExpression -> . booleanVar
    (20) globalExpression -> . globalExpression BINOPERATOR globalExpression
    (21) globalExpression -> . globalExpression OPERATOR globalExpression
    (22) globalExpression -> . globalExpression ADD_OP globalExpression
    (23) globalExpression -> . globalExpression MUL_OP globalExpression
    (24) globalExpression -> . globalExpression DOT globalExpression
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER
    (31) variable -> . VAR
    (35) booleanVar -> . BOOLEAN

    APO             shift and go to state 18
    INTEGER         shift and go to state 20
    VAR             shift and go to state 22
    BOOLEAN         shift and go to state 23

    booleanVar                     shift and go to state 24
    globalExpression               shift and go to state 47
    variable                       shift and go to state 17
    string                         shift and go to state 21
    integerVar                     shift and go to state 25

state 37

    (12) expression -> FOR variableN IN . list DO expressionList ENDFOR
    (13) expression -> FOR variableN IN . variable DO expressionList ENDFOR
    (25) list -> . PAR_OUVR stringListInterior PAR_FERM
    (26) list -> . PAR_OUVR integerListInterior PAR_FERM
    (31) variable -> . VAR

    PAR_OUVR        shift and go to state 38
    VAR             shift and go to state 22

    list                           shift and go to state 49
    variable                       shift and go to state 48

state 38

    (25) list -> PAR_OUVR . stringListInterior PAR_FERM
    (26) list -> PAR_OUVR . integerListInterior PAR_FERM
    (27) stringListInterior -> . string
    (28) stringListInterior -> . string COMMA stringListInterior
    (29) integerListInterior -> . integerVar
    (30) integerListInterior -> . integerVar COMMA integerListInterior
    (33) string -> . APO STRING APO
    (34) integerVar -> . INTEGER

    APO             shift and go to state 18
    INTEGER         shift and go to state 20

    integerVar                     shift and go to state 52
    stringListInterior             shift and go to state 50
    integerListInterior            shift and go to state 53
    string                         shift and go to state 51

state 39

    (9) expression -> variableN ASSIGNEMENT globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    DOT_COMMA       reduce using rule 9 (expression -> variableN ASSIGNEMENT globalExpression .)
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32
    ADD_OP          shift and go to state 36
    MUL_OP          shift and go to state 33
    DOT             shift and go to state 31


state 40

    (10) expression -> variableN ASSIGNEMENT list .

    DOT_COMMA       reduce using rule 10 (expression -> variableN ASSIGNEMENT list .)


state 41

    (33) string -> APO STRING APO .

    BINOPERATOR     reduce using rule 33 (string -> APO STRING APO .)
    OPERATOR        reduce using rule 33 (string -> APO STRING APO .)
    ADD_OP          reduce using rule 33 (string -> APO STRING APO .)
    MUL_OP          reduce using rule 33 (string -> APO STRING APO .)
    DOT             reduce using rule 33 (string -> APO STRING APO .)
    DO              reduce using rule 33 (string -> APO STRING APO .)
    DOT_COMMA       reduce using rule 33 (string -> APO STRING APO .)
    COMMA           reduce using rule 33 (string -> APO STRING APO .)
    PAR_FERM        reduce using rule 33 (string -> APO STRING APO .)


state 42

    (24) globalExpression -> globalExpression DOT globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    DOT             reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .)
    DO              reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .)
    DOT_COMMA       reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .)
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32
    ADD_OP          shift and go to state 36
    MUL_OP          shift and go to state 33

  ! BINOPERATOR     [ reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .) ]
  ! OPERATOR        [ reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .) ]
  ! ADD_OP          [ reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .) ]
  ! MUL_OP          [ reduce using rule 24 (globalExpression -> globalExpression DOT globalExpression .) ]
  ! DOT             [ shift and go to state 31 ]


state 43

    (21) globalExpression -> globalExpression OPERATOR globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    BINOPERATOR     reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    OPERATOR        reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    ADD_OP          reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    MUL_OP          reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    DOT             reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    DO              reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)
    DOT_COMMA       reduce using rule 21 (globalExpression -> globalExpression OPERATOR globalExpression .)

  ! BINOPERATOR     [ shift and go to state 35 ]
  ! OPERATOR        [ shift and go to state 32 ]
  ! ADD_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DOT             [ shift and go to state 31 ]


state 44

    (23) globalExpression -> globalExpression MUL_OP globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    ADD_OP          reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .)
    MUL_OP          reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .)
    DOT             reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .)
    DO              reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .)
    DOT_COMMA       reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .)
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32

  ! BINOPERATOR     [ reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .) ]
  ! OPERATOR        [ reduce using rule 23 (globalExpression -> globalExpression MUL_OP globalExpression .) ]
  ! ADD_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DOT             [ shift and go to state 31 ]


state 45

    (14) expression -> IF globalExpression DO expressionList . ENDIF
    (15) expression -> IF globalExpression DO expressionList . ELSE expressionList ENDIF

    ENDIF           shift and go to state 54
    ELSE            shift and go to state 55


state 46

    (20) globalExpression -> globalExpression BINOPERATOR globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    BINOPERATOR     reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    ADD_OP          reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    MUL_OP          reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    DOT             reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    DO              reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    DOT_COMMA       reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .)
    OPERATOR        shift and go to state 32

  ! OPERATOR        [ reduce using rule 20 (globalExpression -> globalExpression BINOPERATOR globalExpression .) ]
  ! BINOPERATOR     [ shift and go to state 35 ]
  ! ADD_OP          [ shift and go to state 36 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! DOT             [ shift and go to state 31 ]


state 47

    (22) globalExpression -> globalExpression ADD_OP globalExpression .
    (20) globalExpression -> globalExpression . BINOPERATOR globalExpression
    (21) globalExpression -> globalExpression . OPERATOR globalExpression
    (22) globalExpression -> globalExpression . ADD_OP globalExpression
    (23) globalExpression -> globalExpression . MUL_OP globalExpression
    (24) globalExpression -> globalExpression . DOT globalExpression

    ADD_OP          reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .)
    DOT             reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .)
    DO              reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .)
    DOT_COMMA       reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .)
    BINOPERATOR     shift and go to state 35
    OPERATOR        shift and go to state 32
    MUL_OP          shift and go to state 33

  ! BINOPERATOR     [ reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .) ]
  ! OPERATOR        [ reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .) ]
  ! MUL_OP          [ reduce using rule 22 (globalExpression -> globalExpression ADD_OP globalExpression .) ]
  ! ADD_OP          [ shift and go to state 36 ]
  ! DOT             [ shift and go to state 31 ]


state 48

    (13) expression -> FOR variableN IN variable . DO expressionList ENDFOR

    DO              shift and go to state 56


state 49

    (12) expression -> FOR variableN IN list . DO expressionList ENDFOR

    DO              shift and go to state 57


state 50

    (25) list -> PAR_OUVR stringListInterior . PAR_FERM

    PAR_FERM        shift and go to state 58


state 51

    (27) stringListInterior -> string .
    (28) stringListInterior -> string . COMMA stringListInterior

    PAR_FERM        reduce using rule 27 (stringListInterior -> string .)
    COMMA           shift and go to state 59


state 52

    (29) integerListInterior -> integerVar .
    (30) integerListInterior -> integerVar . COMMA integerListInterior

    PAR_FERM        reduce using rule 29 (integerListInterior -> integerVar .)
    COMMA           shift and go to state 60


state 53

    (26) list -> PAR_OUVR integerListInterior . PAR_FERM

    PAR_FERM        shift and go to state 61


state 54

    (14) expression -> IF globalExpression DO expressionList ENDIF .

    DOT_COMMA       reduce using rule 14 (expression -> IF globalExpression DO expressionList ENDIF .)


state 55

    (15) expression -> IF globalExpression DO expressionList ELSE . expressionList ENDIF
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    expressionList                 shift and go to state 62
    variableN                      shift and go to state 12

state 56

    (13) expression -> FOR variableN IN variable DO . expressionList ENDFOR
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    expressionList                 shift and go to state 63
    variableN                      shift and go to state 12

state 57

    (12) expression -> FOR variableN IN list DO . expressionList ENDFOR
    (7) expressionList -> . expression DOT_COMMA
    (8) expressionList -> . expression DOT_COMMA expressionList
    (9) expression -> . variableN ASSIGNEMENT globalExpression
    (10) expression -> . variableN ASSIGNEMENT list
    (11) expression -> . PRINT globalExpression
    (12) expression -> . FOR variableN IN list DO expressionList ENDFOR
    (13) expression -> . FOR variableN IN variable DO expressionList ENDFOR
    (14) expression -> . IF globalExpression DO expressionList ENDIF
    (15) expression -> . IF globalExpression DO expressionList ELSE expressionList ENDIF
    (32) variableN -> . VAR

    PRINT           shift and go to state 10
    FOR             shift and go to state 11
    IF              shift and go to state 9
    VAR             shift and go to state 7

    expression                     shift and go to state 5
    variableN                      shift and go to state 12
    expressionList                 shift and go to state 64

state 58

    (25) list -> PAR_OUVR stringListInterior PAR_FERM .

    DOT_COMMA       reduce using rule 25 (list -> PAR_OUVR stringListInterior PAR_FERM .)
    DO              reduce using rule 25 (list -> PAR_OUVR stringListInterior PAR_FERM .)


state 59

    (28) stringListInterior -> string COMMA . stringListInterior
    (27) stringListInterior -> . string
    (28) stringListInterior -> . string COMMA stringListInterior
    (33) string -> . APO STRING APO

    APO             shift and go to state 18

    stringListInterior             shift and go to state 65
    string                         shift and go to state 51

state 60

    (30) integerListInterior -> integerVar COMMA . integerListInterior
    (29) integerListInterior -> . integerVar
    (30) integerListInterior -> . integerVar COMMA integerListInterior
    (34) integerVar -> . INTEGER

    INTEGER         shift and go to state 20

    integerVar                     shift and go to state 52
    integerListInterior            shift and go to state 66

state 61

    (26) list -> PAR_OUVR integerListInterior PAR_FERM .

    DOT_COMMA       reduce using rule 26 (list -> PAR_OUVR integerListInterior PAR_FERM .)
    DO              reduce using rule 26 (list -> PAR_OUVR integerListInterior PAR_FERM .)


state 62

    (15) expression -> IF globalExpression DO expressionList ELSE expressionList . ENDIF

    ENDIF           shift and go to state 67


state 63

    (13) expression -> FOR variableN IN variable DO expressionList . ENDFOR

    ENDFOR          shift and go to state 68


state 64

    (12) expression -> FOR variableN IN list DO expressionList . ENDFOR

    ENDFOR          shift and go to state 69


state 65

    (28) stringListInterior -> string COMMA stringListInterior .

    PAR_FERM        reduce using rule 28 (stringListInterior -> string COMMA stringListInterior .)


state 66

    (30) integerListInterior -> integerVar COMMA integerListInterior .

    PAR_FERM        reduce using rule 30 (integerListInterior -> integerVar COMMA integerListInterior .)


state 67

    (15) expression -> IF globalExpression DO expressionList ELSE expressionList ENDIF .

    DOT_COMMA       reduce using rule 15 (expression -> IF globalExpression DO expressionList ELSE expressionList ENDIF .)


state 68

    (13) expression -> FOR variableN IN variable DO expressionList ENDFOR .

    DOT_COMMA       reduce using rule 13 (expression -> FOR variableN IN variable DO expressionList ENDFOR .)


state 69

    (12) expression -> FOR variableN IN list DO expressionList ENDFOR .

    DOT_COMMA       reduce using rule 12 (expression -> FOR variableN IN list DO expressionList ENDFOR .)

