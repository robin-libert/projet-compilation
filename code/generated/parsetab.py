
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_OP APO ASSIGNEMENT BLOC_BEGIN BLOC_END COMMA DO DOT DOT_COMMA ELSE ENDFOR ENDIF FOR IF IN INTEGER MUL_OP PAR_FERM PAR_OUVR PRINT STRING TXT VARprogramme : TXT \n                 | TXT programmeprogramme : dumboBloc\n                 | dumboBloc programmedumboBloc : BLOC_BEGIN expressionList BLOC_ENDexpressionList : expression DOT_COMMA\n                      | expression DOT_COMMA expressionListexpression : variable ASSIGNEMENT stringExpression\n                  | variable ASSIGNEMENT stringListexpression : PRINT stringExpressionexpression : FOR variable IN stringList DO expressionList ENDFORexpression : FOR variable IN variable DO expressionList ENDFORstringExpression : variable\n                        | string\n                        | stringExpression DOT stringExpressionstringList : PAR_OUVR stringListInterior PAR_FERMstringListInterior : string\n                          | string COMMA stringListInteriorvariable : VARstring : APO STRING APO'
    
_lr_action_items = {'STRING':([13,],[21,]),'DO':([11,30,31,36,],[-19,34,35,-16,]),'APO':([6,20,21,22,26,37,],[13,13,28,13,13,13,]),'$end':([1,3,4,5,12,18,],[-3,0,-1,-4,-2,-5,]),'PAR_OUVR':([20,23,],[26,26,]),'PRINT':([2,19,34,35,],[6,6,6,6,]),'BLOC_END':([8,19,24,],[18,-6,-7,]),'FOR':([2,19,34,35,],[7,7,7,7,]),'ENDFOR':([19,24,38,39,],[-6,-7,41,42,]),'DOT_COMMA':([9,11,14,15,16,25,27,28,29,36,41,42,],[19,-19,-10,-14,-13,-8,-9,-20,-15,-16,-12,-11,]),'PAR_FERM':([28,32,33,40,],[-20,36,-17,-18,]),'DOT':([11,14,15,16,25,28,29,],[-19,22,-14,-13,22,-20,22,]),'IN':([11,17,],[-19,23,]),'BLOC_BEGIN':([0,1,4,18,],[2,2,2,-5,]),'ASSIGNEMENT':([10,11,],[20,-19,]),'COMMA':([28,33,],[-20,37,]),'TXT':([0,1,4,18,],[4,4,4,-5,]),'VAR':([2,6,7,19,20,22,23,34,35,],[11,11,11,11,11,11,11,11,11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stringListInterior':([26,37,],[32,40,]),'stringExpression':([6,20,22,],[14,25,29,]),'dumboBloc':([0,1,4,],[1,1,1,]),'expressionList':([2,19,34,35,],[8,24,38,39,]),'expression':([2,19,34,35,],[9,9,9,9,]),'programme':([0,1,4,],[3,5,12,]),'string':([6,20,22,26,37,],[15,15,15,33,33,]),'stringList':([20,23,],[27,31,]),'variable':([2,6,7,19,20,22,23,34,35,],[10,16,17,10,16,16,30,10,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> TXT','programme',1,'p_programme_Text','dumbo_synth.py',8),
  ('programme -> TXT programme','programme',2,'p_programme_Text','dumbo_synth.py',9),
  ('programme -> dumboBloc','programme',1,'p_programme_dumboBloc','dumbo_synth.py',17),
  ('programme -> dumboBloc programme','programme',2,'p_programme_dumboBloc','dumbo_synth.py',18),
  ('dumboBloc -> BLOC_BEGIN expressionList BLOC_END','dumboBloc',3,'p_dumboBloc_expressionList','dumbo_synth.py',26),
  ('expressionList -> expression DOT_COMMA','expressionList',2,'p_expressionList_expression','dumbo_synth.py',30),
  ('expressionList -> expression DOT_COMMA expressionList','expressionList',3,'p_expressionList_expression','dumbo_synth.py',31),
  ('expression -> variable ASSIGNEMENT stringExpression','expression',3,'p_expression_variable','dumbo_synth.py',38),
  ('expression -> variable ASSIGNEMENT stringList','expression',3,'p_expression_variable','dumbo_synth.py',39),
  ('expression -> PRINT stringExpression','expression',2,'p_expression_print','dumbo_synth.py',43),
  ('expression -> FOR variable IN stringList DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',47),
  ('expression -> FOR variable IN variable DO expressionList ENDFOR','expression',7,'p_expression_forVariable','dumbo_synth.py',50),
  ('stringExpression -> variable','stringExpression',1,'p_stringExpression','dumbo_synth.py',53),
  ('stringExpression -> string','stringExpression',1,'p_stringExpression','dumbo_synth.py',54),
  ('stringExpression -> stringExpression DOT stringExpression','stringExpression',3,'p_stringExpression','dumbo_synth.py',55),
  ('stringList -> PAR_OUVR stringListInterior PAR_FERM','stringList',3,'p_stringList_int','dumbo_synth.py',62),
  ('stringListInterior -> string','stringListInterior',1,'p_stringListInterior','dumbo_synth.py',66),
  ('stringListInterior -> string COMMA stringListInterior','stringListInterior',3,'p_stringListInterior','dumbo_synth.py',67),
  ('variable -> VAR','variable',1,'p_variable','dumbo_synth.py',74),
  ('string -> APO STRING APO','string',3,'p_string_seString','dumbo_synth.py',78),
]
