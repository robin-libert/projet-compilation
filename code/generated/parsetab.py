
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD_OP APO ASSIGNEMENT BLOC_BEGIN BLOC_END COMMA DO DOT DOT_COMMA ELSE ENDFOR ENDIF FOR IF IN INTEGER MUL_OP PAR_FERM PAR_OUVR PRINT STRING TXT VARprogramme : TXT \n                 | TXT programmeprogramme : dumboBloc\n                 | dumboBloc programmedumboBloc : BLOC_BEGIN expressionList BLOC_ENDexpressionList : expression DOT_COMMA\n                      | expression DOT_COMMA expressionListexpression : variableN ASSIGNEMENT stringExpression\n                  | variableN ASSIGNEMENT stringListexpression : PRINT stringExpressionexpression : FOR variableN IN stringList DO expressionList ENDFOR\n                  | FOR variableN IN variable DO expressionList ENDFORstringExpression : variable\n                        | string\n                        | stringExpression DOT stringExpressionstringList : PAR_OUVR stringListInterior PAR_FERMstringListInterior : string\n                          | string COMMA stringListInteriorvariable : VARvariableN : VARstring : APO STRING APO'
    
_lr_action_items = {'VAR':([4,8,11,19,21,22,27,37,38,],[7,14,7,14,7,14,14,7,7,]),'BLOC_BEGIN':([0,2,3,18,],[4,4,4,-5,]),'PRINT':([4,21,37,38,],[8,8,8,8,]),'PAR_FERM':([30,31,32,39,],[-21,35,-17,-18,]),'TXT':([0,2,3,18,],[2,2,2,-5,]),'DO':([14,33,34,35,],[-19,37,38,-16,]),'APO':([8,19,22,23,26,36,],[17,17,17,30,17,17,]),'DOT_COMMA':([12,13,14,15,16,24,25,29,30,35,42,43,],[21,-10,-19,-13,-14,-9,-8,-15,-21,-16,-12,-11,]),'PAR_OUVR':([19,27,],[26,26,]),'$end':([1,2,3,5,6,18,],[0,-1,-3,-2,-4,-5,]),'IN':([7,20,],[-20,27,]),'COMMA':([30,32,],[-21,36,]),'STRING':([17,],[23,]),'FOR':([4,21,37,38,],[11,11,11,11,]),'ASSIGNEMENT':([7,10,],[-20,19,]),'ENDFOR':([21,28,40,41,],[-6,-7,42,43,]),'BLOC_END':([9,21,28,],[18,-6,-7,]),'DOT':([13,14,15,16,25,29,30,],[22,-19,-13,-14,22,22,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string':([8,19,22,26,36,],[16,16,16,32,32,]),'programme':([0,2,3,],[1,5,6,]),'stringListInterior':([26,36,],[31,39,]),'expressionList':([4,21,37,38,],[9,28,40,41,]),'dumboBloc':([0,2,3,],[3,3,3,]),'stringExpression':([8,19,22,],[13,25,29,]),'variableN':([4,11,21,37,38,],[10,20,10,10,10,]),'expression':([4,21,37,38,],[12,12,12,12,]),'stringList':([19,27,],[24,34,]),'variable':([8,19,22,27,],[15,15,15,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> TXT','programme',1,'p_programme_Text','dumbo_synth.py',8),
  ('programme -> TXT programme','programme',2,'p_programme_Text','dumbo_synth.py',9),
  ('programme -> dumboBloc','programme',1,'p_programme_dumboBloc','dumbo_synth.py',17),
  ('programme -> dumboBloc programme','programme',2,'p_programme_dumboBloc','dumbo_synth.py',18),
  ('dumboBloc -> BLOC_BEGIN expressionList BLOC_END','dumboBloc',3,'p_dumboBloc_expressionList','dumbo_synth.py',26),
  ('expressionList -> expression DOT_COMMA','expressionList',2,'p_expressionList_expression','dumbo_synth.py',30),
  ('expressionList -> expression DOT_COMMA expressionList','expressionList',3,'p_expressionList_expression','dumbo_synth.py',31),
  ('expression -> variableN ASSIGNEMENT stringExpression','expression',3,'p_expression_variable','dumbo_synth.py',38),
  ('expression -> variableN ASSIGNEMENT stringList','expression',3,'p_expression_variable','dumbo_synth.py',39),
  ('expression -> PRINT stringExpression','expression',2,'p_expression_print','dumbo_synth.py',43),
  ('expression -> FOR variableN IN stringList DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',47),
  ('expression -> FOR variableN IN variable DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',48),
  ('stringExpression -> variable','stringExpression',1,'p_stringExpression','dumbo_synth.py',52),
  ('stringExpression -> string','stringExpression',1,'p_stringExpression','dumbo_synth.py',53),
  ('stringExpression -> stringExpression DOT stringExpression','stringExpression',3,'p_stringExpression','dumbo_synth.py',54),
  ('stringList -> PAR_OUVR stringListInterior PAR_FERM','stringList',3,'p_stringList_int','dumbo_synth.py',61),
  ('stringListInterior -> string','stringListInterior',1,'p_stringListInterior','dumbo_synth.py',65),
  ('stringListInterior -> string COMMA stringListInterior','stringListInterior',3,'p_stringListInterior','dumbo_synth.py',66),
  ('variable -> VAR','variable',1,'p_variable_dico','dumbo_synth.py',73),
  ('variableN -> VAR','variableN',1,'p_variable_name','dumbo_synth.py',78),
  ('string -> APO STRING APO','string',3,'p_string_seString','dumbo_synth.py',82),
]
