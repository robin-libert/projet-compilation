
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOTleftADD_OPleftMUL_OPleftBINOPERATORleftOPERATORADD_OP APO ASSIGNEMENT BINOPERATOR BLOC_BEGIN BLOC_END BOOLEAN COMMA DO DOT DOT_COMMA ELSE ENDFOR ENDIF FOR IF IN INTEGER MUL_OP OPERATOR PAR_FERM PAR_OUVR PRINT STRING TXT VARprogramme : TXT \n                 | TXT programmeprogramme : dumboBloc\n                 | dumboBloc programmedumboBloc : BLOC_BEGIN expressionList BLOC_END\n                 | BLOC_BEGIN BLOC_ENDexpressionList : expression DOT_COMMA\n                      | expression DOT_COMMA expressionListexpression : variableN ASSIGNEMENT globalExpression\n                  | variableN ASSIGNEMENT listexpression : PRINT globalExpressionexpression : FOR variableN IN list DO expressionList ENDFOR\n                  | FOR variableN IN variable DO expressionList ENDFORexpression : IF globalExpression DO expressionList ENDIF\n                  | IF globalExpression DO expressionList ELSE expressionList ENDIFglobalExpression : string\n                        | integerVar\n                        | variable\n                        | booleanVar\n                        | globalExpression BINOPERATOR globalExpression\n                        | globalExpression OPERATOR globalExpression\n                        | globalExpression ADD_OP globalExpression\n                        | globalExpression MUL_OP globalExpression\n                        | globalExpression DOT globalExpressionlist : PAR_OUVR stringListInterior PAR_FERM\n            | PAR_OUVR integerListInterior PAR_FERMstringListInterior : string\n                          | string COMMA stringListInteriorintegerListInterior : integerVar\n                           | integerVar COMMA integerListInteriorvariable : VARvariableN : VARstring : APO STRING APOintegerVar : INTEGERbooleanVar : BOOLEAN'
    
_lr_action_items = {'TXT':([0,1,4,8,28,],[1,1,1,-6,-5,]),'PAR_FERM':([20,41,42,43,44,47,62,63,],[-34,-29,55,-27,57,-33,-30,-28,]),'FOR':([3,26,37,58,59,61,],[7,7,7,7,7,7,]),'IF':([3,26,37,58,59,61,],[9,9,9,9,9,9,]),'INTEGER':([9,12,15,30,34,35,36,38,39,54,],[20,20,20,20,20,20,20,20,20,20,]),'OPERATOR':([17,18,20,21,22,23,24,25,27,29,47,48,49,50,52,53,],[-16,-17,-34,-35,-19,38,-18,-31,38,38,-33,38,38,38,-21,38,]),'COMMA':([20,41,43,47,],[-34,54,56,-33,]),'ELSE':([26,40,51,],[-7,-8,61,]),'BINOPERATOR':([17,18,20,21,22,23,24,25,27,29,47,48,49,50,52,53,],[-16,-17,-34,-35,-19,34,-18,-31,34,34,-33,-20,34,34,-21,34,]),'PAR_OUVR':([15,32,],[30,30,]),'ENDFOR':([26,40,64,65,],[-7,-8,67,68,]),'MUL_OP':([17,18,20,21,22,23,24,25,27,29,47,48,49,50,52,53,],[-16,-17,-34,-35,-19,39,-18,-31,39,39,-33,-20,39,39,-21,-23,]),'BLOC_BEGIN':([0,1,4,8,28,],[3,3,3,-6,-5,]),'DO':([17,18,20,21,22,23,24,25,45,46,47,48,49,50,52,53,55,57,],[-16,-17,-34,-35,-19,37,-18,-31,58,59,-33,-20,-22,-24,-21,-23,-25,-26,]),'DOT_COMMA':([11,17,18,20,21,22,24,25,27,29,31,47,48,49,50,52,53,55,57,60,67,68,69,],[26,-16,-17,-34,-35,-19,-18,-31,-11,-9,-10,-33,-20,-22,-24,-21,-23,-25,-26,-14,-12,-13,-15,]),'STRING':([19,],[33,]),'DOT':([17,18,20,21,22,23,24,25,27,29,47,48,49,50,52,53,],[-16,-17,-34,-35,-19,36,-18,-31,36,36,-33,-20,-22,-24,-21,-23,]),'BLOC_END':([3,13,26,40,],[8,28,-7,-8,]),'APO':([9,12,15,30,33,34,35,36,38,39,56,],[19,19,19,19,47,19,19,19,19,19,19,]),'ENDIF':([26,40,51,66,],[-7,-8,60,69,]),'PRINT':([3,26,37,58,59,61,],[12,12,12,12,12,12,]),'BOOLEAN':([9,12,15,34,35,36,38,39,],[21,21,21,21,21,21,21,21,]),'$end':([1,2,4,5,8,14,28,],[-1,0,-3,-2,-6,-4,-5,]),'VAR':([3,7,9,12,15,26,32,34,35,36,37,38,39,58,59,61,],[10,10,25,25,25,10,25,25,25,25,10,25,25,10,10,10,]),'ADD_OP':([17,18,20,21,22,23,24,25,27,29,47,48,49,50,52,53,],[-16,-17,-34,-35,-19,35,-18,-31,35,35,-33,-20,-22,35,-21,-23,]),'ASSIGNEMENT':([6,10,],[15,-32,]),'IN':([10,16,],[-32,32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'string':([9,12,15,30,34,35,36,38,39,56,],[17,17,17,43,17,17,17,17,17,43,]),'integerVar':([9,12,15,30,34,35,36,38,39,54,],[18,18,18,41,18,18,18,18,18,41,]),'dumboBloc':([0,1,4,],[4,4,4,]),'expression':([3,26,37,58,59,61,],[11,11,11,11,11,11,]),'globalExpression':([9,12,15,34,35,36,38,39,],[23,27,29,48,49,50,52,53,]),'programme':([0,1,4,],[2,5,14,]),'stringListInterior':([30,56,],[42,63,]),'booleanVar':([9,12,15,34,35,36,38,39,],[22,22,22,22,22,22,22,22,]),'list':([15,32,],[31,45,]),'variableN':([3,7,26,37,58,59,61,],[6,16,6,6,6,6,6,]),'integerListInterior':([30,54,],[44,62,]),'expressionList':([3,26,37,58,59,61,],[13,40,51,64,65,66,]),'variable':([9,12,15,32,34,35,36,38,39,],[24,24,24,46,24,24,24,24,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> TXT','programme',1,'p_programme_Text','dumbo_synth.py',10),
  ('programme -> TXT programme','programme',2,'p_programme_Text','dumbo_synth.py',11),
  ('programme -> dumboBloc','programme',1,'p_programme_dumboBloc','dumbo_synth.py',19),
  ('programme -> dumboBloc programme','programme',2,'p_programme_dumboBloc','dumbo_synth.py',20),
  ('dumboBloc -> BLOC_BEGIN expressionList BLOC_END','dumboBloc',3,'p_dumboBloc_expressionList','dumbo_synth.py',28),
  ('dumboBloc -> BLOC_BEGIN BLOC_END','dumboBloc',2,'p_dumboBloc_expressionList','dumbo_synth.py',29),
  ('expressionList -> expression DOT_COMMA','expressionList',2,'p_expressionList_expression','dumbo_synth.py',37),
  ('expressionList -> expression DOT_COMMA expressionList','expressionList',3,'p_expressionList_expression','dumbo_synth.py',38),
  ('expression -> variableN ASSIGNEMENT globalExpression','expression',3,'p_expression_variable','dumbo_synth.py',46),
  ('expression -> variableN ASSIGNEMENT list','expression',3,'p_expression_variable','dumbo_synth.py',47),
  ('expression -> PRINT globalExpression','expression',2,'p_expression_print','dumbo_synth.py',51),
  ('expression -> FOR variableN IN list DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',55),
  ('expression -> FOR variableN IN variable DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',56),
  ('expression -> IF globalExpression DO expressionList ENDIF','expression',5,'p_expression_boolean','dumbo_synth.py',60),
  ('expression -> IF globalExpression DO expressionList ELSE expressionList ENDIF','expression',7,'p_expression_boolean','dumbo_synth.py',61),
  ('globalExpression -> string','globalExpression',1,'p_globalExpression','dumbo_synth.py',69),
  ('globalExpression -> integerVar','globalExpression',1,'p_globalExpression','dumbo_synth.py',70),
  ('globalExpression -> variable','globalExpression',1,'p_globalExpression','dumbo_synth.py',71),
  ('globalExpression -> booleanVar','globalExpression',1,'p_globalExpression','dumbo_synth.py',72),
  ('globalExpression -> globalExpression BINOPERATOR globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',73),
  ('globalExpression -> globalExpression OPERATOR globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',74),
  ('globalExpression -> globalExpression ADD_OP globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',75),
  ('globalExpression -> globalExpression MUL_OP globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',76),
  ('globalExpression -> globalExpression DOT globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',77),
  ('list -> PAR_OUVR stringListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',85),
  ('list -> PAR_OUVR integerListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',86),
  ('stringListInterior -> string','stringListInterior',1,'p_stringListInterior','dumbo_synth.py',91),
  ('stringListInterior -> string COMMA stringListInterior','stringListInterior',3,'p_stringListInterior','dumbo_synth.py',92),
  ('integerListInterior -> integerVar','integerListInterior',1,'p_integerListInterior','dumbo_synth.py',100),
  ('integerListInterior -> integerVar COMMA integerListInterior','integerListInterior',3,'p_integerListInterior','dumbo_synth.py',101),
  ('variable -> VAR','variable',1,'p_variable_dico','dumbo_synth.py',110),
  ('variableN -> VAR','variableN',1,'p_variable_name','dumbo_synth.py',114),
  ('string -> APO STRING APO','string',3,'p_string_seString','dumbo_synth.py',119),
  ('integerVar -> INTEGER','integerVar',1,'p_integerVar','dumbo_synth.py',124),
  ('booleanVar -> BOOLEAN','booleanVar',1,'p_booleanVar','dumbo_synth.py',129),
]
