
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOTleftADD_OPleftMUL_OPleftBINOPERATORleftOPERATORADD_OP APO ASSIGNEMENT BINOPERATOR BLOC_BEGIN BLOC_END BOOLEAN COMMA DO DOT DOT_COMMA ELSE ENDFOR ENDIF FOR IF IN INTEGER MUL_OP OPERATOR PAR_FERM PAR_OUVR PRINT STRING TXT VARprogramme : TXT \n                 | TXT programmeprogramme : dumboBloc\n                 | dumboBloc programmedumboBloc : BLOC_BEGIN expressionList BLOC_END\n                 | BLOC_BEGIN BLOC_ENDexpressionList : expression DOT_COMMA\n                      | expression DOT_COMMA expressionListexpression : variableN ASSIGNEMENT globalExpression\n                  | variableN ASSIGNEMENT listexpression : PRINT globalExpressionexpression : FOR variableN IN list DO expressionList ENDFOR\n                  | FOR variableN IN variable DO expressionList ENDFORexpression : IF globalExpression DO expressionList ENDIF\n                  | IF globalExpression DO expressionList ELSE expressionList ENDIFglobalExpression : string\n                        | integerVar\n                        | variable\n                        | booleanVar\n                        | globalExpression BINOPERATOR globalExpression\n                        | globalExpression OPERATOR globalExpression\n                        | globalExpression ADD_OP globalExpression\n                        | globalExpression MUL_OP globalExpression\n                        | globalExpression DOT globalExpressionlist : PAR_OUVR stringListInterior PAR_FERM\n            | PAR_OUVR integerListInterior PAR_FERMstringListInterior : string\n                          | string COMMA stringListInteriorintegerListInterior : integerVar\n                           | integerVar COMMA integerListInteriorvariable : VARvariableN : VARstring : APO STRING APOintegerVar : INTEGERbooleanVar : BOOLEAN'
    
_lr_action_items = {'BOOLEAN':([9,10,28,31,32,33,35,36,],[23,23,23,23,23,23,23,23,]),'APO':([9,10,28,30,31,32,33,35,36,38,59,],[18,18,18,41,18,18,18,18,18,18,18,]),'STRING':([18,],[30,]),'$end':([2,3,4,8,13,14,16,],[-1,0,-3,-6,-2,-4,-5,]),'OPERATOR':([17,19,20,21,22,23,24,25,26,39,41,42,43,44,46,47,],[-18,32,-34,-16,-31,-35,-19,-17,32,32,-33,32,-21,32,32,32,]),'VAR':([1,9,10,11,15,28,31,32,33,34,35,36,37,55,56,57,],[7,22,22,7,7,22,22,22,22,7,22,22,22,7,7,7,]),'MUL_OP':([17,19,20,21,22,23,24,25,26,39,41,42,43,44,46,47,],[-18,33,-34,-16,-31,-35,-19,-17,33,33,-33,33,-21,-23,-20,33,]),'DO':([17,19,20,21,22,23,24,25,41,42,43,44,46,47,48,49,58,61,],[-18,34,-34,-16,-31,-35,-19,-17,-33,-24,-21,-23,-20,-22,56,57,-25,-26,]),'ENDIF':([15,29,45,62,],[-7,-8,54,67,]),'PRINT':([1,15,34,55,56,57,],[10,10,10,10,10,10,]),'ELSE':([15,29,45,],[-7,-8,55,]),'DOT_COMMA':([5,17,20,21,22,23,24,25,26,39,40,41,42,43,44,46,47,54,58,61,67,68,69,],[15,-18,-34,-16,-31,-35,-19,-17,-11,-9,-10,-33,-24,-21,-23,-20,-22,-14,-25,-26,-15,-13,-12,]),'ENDFOR':([15,29,63,64,],[-7,-8,68,69,]),'BLOC_BEGIN':([0,2,4,8,16,],[1,1,1,-6,-5,]),'BINOPERATOR':([17,19,20,21,22,23,24,25,26,39,41,42,43,44,46,47,],[-18,35,-34,-16,-31,-35,-19,-17,35,35,-33,35,-21,35,-20,35,]),'IN':([7,27,],[-32,37,]),'ASSIGNEMENT':([7,12,],[-32,28,]),'PAR_OUVR':([28,37,],[38,38,]),'TXT':([0,2,4,8,16,],[2,2,2,-6,-5,]),'PAR_FERM':([20,41,50,51,52,53,65,66,],[-34,-33,58,-27,-29,61,-28,-30,]),'BLOC_END':([1,6,15,29,],[8,16,-7,-8,]),'COMMA':([20,41,51,52,],[-34,-33,59,60,]),'IF':([1,15,34,55,56,57,],[9,9,9,9,9,9,]),'INTEGER':([9,10,28,31,32,33,35,36,38,60,],[20,20,20,20,20,20,20,20,20,20,]),'DOT':([17,19,20,21,22,23,24,25,26,39,41,42,43,44,46,47,],[-18,31,-34,-16,-31,-35,-19,-17,31,31,-33,-24,-21,-23,-20,-22,]),'FOR':([1,15,34,55,56,57,],[11,11,11,11,11,11,]),'ADD_OP':([17,19,20,21,22,23,24,25,26,39,41,42,43,44,46,47,],[-18,36,-34,-16,-31,-35,-19,-17,36,36,-33,36,-21,-23,-20,-22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([1,15,34,55,56,57,],[5,5,5,5,5,5,]),'expressionList':([1,15,34,55,56,57,],[6,29,45,62,63,64,]),'variable':([9,10,28,31,32,33,35,36,37,],[17,17,17,17,17,17,17,17,48,]),'dumboBloc':([0,2,4,],[4,4,4,]),'globalExpression':([9,10,28,31,32,33,35,36,],[19,26,39,42,43,44,46,47,]),'list':([28,37,],[40,49,]),'stringListInterior':([38,59,],[50,65,]),'string':([9,10,28,31,32,33,35,36,38,59,],[21,21,21,21,21,21,21,21,51,51,]),'variableN':([1,11,15,34,55,56,57,],[12,27,12,12,12,12,12,]),'booleanVar':([9,10,28,31,32,33,35,36,],[24,24,24,24,24,24,24,24,]),'integerVar':([9,10,28,31,32,33,35,36,38,60,],[25,25,25,25,25,25,25,25,52,52,]),'integerListInterior':([38,60,],[53,66,]),'programme':([0,2,4,],[3,13,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> TXT','programme',1,'p_programme_Text','dumbo_synth.py',10),
  ('programme -> TXT programme','programme',2,'p_programme_Text','dumbo_synth.py',11),
  ('programme -> dumboBloc','programme',1,'p_programme_dumboBloc','dumbo_synth.py',19),
  ('programme -> dumboBloc programme','programme',2,'p_programme_dumboBloc','dumbo_synth.py',20),
  ('dumboBloc -> BLOC_BEGIN expressionList BLOC_END','dumboBloc',3,'p_dumboBloc_expressionList','dumbo_synth.py',28),
  ('dumboBloc -> BLOC_BEGIN BLOC_END','dumboBloc',2,'p_dumboBloc_expressionList','dumbo_synth.py',29),
  ('expressionList -> expression DOT_COMMA','expressionList',2,'p_expressionList_expression','dumbo_synth.py',37),
  ('expressionList -> expression DOT_COMMA expressionList','expressionList',3,'p_expressionList_expression','dumbo_synth.py',38),
  ('expression -> variableN ASSIGNEMENT globalExpression','expression',3,'p_expression_variable','dumbo_synth.py',46),
  ('expression -> variableN ASSIGNEMENT list','expression',3,'p_expression_variable','dumbo_synth.py',47),
  ('expression -> PRINT globalExpression','expression',2,'p_expression_print','dumbo_synth.py',51),
  ('expression -> FOR variableN IN list DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',55),
  ('expression -> FOR variableN IN variable DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',56),
  ('expression -> IF globalExpression DO expressionList ENDIF','expression',5,'p_expression_boolean','dumbo_synth.py',60),
  ('expression -> IF globalExpression DO expressionList ELSE expressionList ENDIF','expression',7,'p_expression_boolean','dumbo_synth.py',61),
  ('globalExpression -> string','globalExpression',1,'p_globalExpression','dumbo_synth.py',69),
  ('globalExpression -> integerVar','globalExpression',1,'p_globalExpression','dumbo_synth.py',70),
  ('globalExpression -> variable','globalExpression',1,'p_globalExpression','dumbo_synth.py',71),
  ('globalExpression -> booleanVar','globalExpression',1,'p_globalExpression','dumbo_synth.py',72),
  ('globalExpression -> globalExpression BINOPERATOR globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',73),
  ('globalExpression -> globalExpression OPERATOR globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',74),
  ('globalExpression -> globalExpression ADD_OP globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',75),
  ('globalExpression -> globalExpression MUL_OP globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',76),
  ('globalExpression -> globalExpression DOT globalExpression','globalExpression',3,'p_globalExpression','dumbo_synth.py',77),
  ('list -> PAR_OUVR stringListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',85),
  ('list -> PAR_OUVR integerListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',86),
  ('stringListInterior -> string','stringListInterior',1,'p_stringListInterior','dumbo_synth.py',91),
  ('stringListInterior -> string COMMA stringListInterior','stringListInterior',3,'p_stringListInterior','dumbo_synth.py',92),
  ('integerListInterior -> integerVar','integerListInterior',1,'p_integerListInterior','dumbo_synth.py',100),
  ('integerListInterior -> integerVar COMMA integerListInterior','integerListInterior',3,'p_integerListInterior','dumbo_synth.py',101),
  ('variable -> VAR','variable',1,'p_variable_dico','dumbo_synth.py',110),
  ('variableN -> VAR','variableN',1,'p_variable_name','dumbo_synth.py',114),
  ('string -> APO STRING APO','string',3,'p_string_seString','dumbo_synth.py',119),
  ('integerVar -> INTEGER','integerVar',1,'p_integerVar','dumbo_synth.py',124),
  ('booleanVar -> BOOLEAN','booleanVar',1,'p_booleanVar','dumbo_synth.py',129),
]
