
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOTleftADD_OPleftMUL_OPleftBINOPERATORADD_OP APO ASSIGNEMENT BINOPERATOR BLOC_BEGIN BLOC_END BOOLEAN COMMA DO DOT DOT_COMMA ELSE ENDFOR ENDIF FOR IF IN INTEGER MUL_OP OPERATOR PAR_FERM PAR_OUVR PRINT STRING TXT VARprogramme : TXT \n                 | TXT programmeprogramme : dumboBloc\n                 | dumboBloc programmedumboBloc : BLOC_BEGIN expressionList BLOC_ENDexpressionList : expression DOT_COMMA\n                      | expression DOT_COMMA expressionListexpression : variableN ASSIGNEMENT stringExpression\n                  | variableN ASSIGNEMENT listexpression : PRINT stringExpressionexpression : FOR variableN IN list DO expressionList ENDFOR\n                  | FOR variableN IN variable DO expressionList ENDFORexpression : IF boolean DO expressionList ENDIF\n                  | IF boolean DO expressionList ELSE expressionList ENDIFstringExpression : boolean\n                        | string\n                        | stringExpression DOT stringExpressionlist : PAR_OUVR stringListInterior PAR_FERM\n            | PAR_OUVR integerListInterior PAR_FERMstringListInterior : string\n                          | string COMMA stringListInteriorintegerListInterior : integer\n                           | integer COMMA integerListInteriorvariable : VARvariableN : VARstring : APO STRING APOinteger : integerVar\n               | variable\n               | integer ADD_OP integer\n               | integer MUL_OP integerintegerVar : INTEGERboolean : booleanVar\n               | booleanOP\n               | boolean BINOPERATOR booleanbooleanOP : integer OPERATOR integer\n                 | integerbooleanVar : BOOLEAN'
    
_lr_action_items = {'MUL_OP':([19,20,21,22,23,45,49,50,51,],[-28,-27,-24,-31,37,37,37,-30,37,]),'APO':([12,14,32,41,42,57,],[28,28,28,54,28,28,]),'BOOLEAN':([7,12,14,35,42,],[18,18,18,18,18,]),'TXT':([0,1,4,26,],[1,1,1,-5,]),'DOT_COMMA':([9,15,16,18,19,20,21,22,23,27,29,30,31,33,48,49,50,51,54,55,56,59,61,69,70,71,],[25,-32,-33,-37,-28,-27,-24,-31,-36,-15,-16,-10,-9,-8,-34,-35,-30,-29,-26,-17,-18,-19,-13,-14,-11,-12,]),'ENDIF':([25,40,47,66,],[-6,-7,61,69,]),'BLOC_END':([10,25,40,],[26,-6,-7,]),'PAR_OUVR':([14,39,],[32,32,]),'ADD_OP':([19,20,21,22,23,45,49,50,51,],[-28,-27,-24,-31,38,38,38,-30,-29,]),'INTEGER':([7,12,14,32,35,36,37,38,42,58,],[22,22,22,22,22,22,22,22,22,22,]),'OPERATOR':([19,20,21,22,23,50,51,],[-28,-27,-24,-31,36,-30,-29,]),'FOR':([3,25,34,60,62,63,],[8,8,8,8,8,8,]),'STRING':([28,],[41,]),'ELSE':([25,40,47,],[-6,-7,60,]),'PAR_FERM':([19,20,21,22,43,44,45,46,50,51,54,64,65,],[-28,-27,-24,-31,56,-20,-22,59,-30,-29,-26,-21,-23,]),'DO':([15,16,17,18,19,20,21,22,23,48,49,50,51,52,53,56,59,],[-32,-33,34,-37,-28,-27,-24,-31,-36,-34,-35,-30,-29,62,63,-18,-19,]),'COMMA':([19,20,21,22,44,45,50,51,54,],[-28,-27,-24,-31,57,58,-30,-29,-26,]),'IF':([3,25,34,60,62,63,],[7,7,7,7,7,7,]),'ASSIGNEMENT':([6,11,],[14,-25,]),'DOT':([15,16,18,19,20,21,22,23,27,29,30,33,48,49,50,51,54,55,],[-32,-33,-37,-28,-27,-24,-31,-36,-15,-16,42,42,-34,-35,-30,-29,-26,-17,]),'ENDFOR':([25,40,67,68,],[-6,-7,70,71,]),'BINOPERATOR':([15,16,17,18,19,20,21,22,23,27,48,49,50,51,],[-32,-33,35,-37,-28,-27,-24,-31,-36,35,-34,-35,-30,-29,]),'VAR':([3,7,8,12,14,25,32,34,35,36,37,38,39,42,58,60,62,63,],[11,21,11,21,21,11,21,11,21,21,21,21,21,21,21,11,11,11,]),'$end':([1,2,4,5,13,26,],[-1,0,-3,-2,-4,-5,]),'IN':([11,24,],[-25,39,]),'BLOC_BEGIN':([0,1,4,26,],[3,3,3,-5,]),'PRINT':([3,25,34,60,62,63,],[12,12,12,12,12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'variableN':([3,8,25,34,60,62,63,],[6,24,6,6,6,6,6,]),'booleanOP':([7,12,14,35,42,],[16,16,16,16,16,]),'boolean':([7,12,14,35,42,],[17,27,27,48,27,]),'booleanVar':([7,12,14,35,42,],[15,15,15,15,15,]),'integerVar':([7,12,14,32,35,36,37,38,42,58,],[20,20,20,20,20,20,20,20,20,20,]),'programme':([0,1,4,],[2,5,13,]),'variable':([7,12,14,32,35,36,37,38,39,42,58,],[19,19,19,19,19,19,19,19,53,19,19,]),'dumboBloc':([0,1,4,],[4,4,4,]),'stringListInterior':([32,57,],[43,64,]),'string':([12,14,32,42,57,],[29,29,44,29,44,]),'list':([14,39,],[31,52,]),'expression':([3,25,34,60,62,63,],[9,9,9,9,9,9,]),'expressionList':([3,25,34,60,62,63,],[10,40,47,66,67,68,]),'integer':([7,12,14,32,35,36,37,38,42,58,],[23,23,23,45,23,49,50,51,23,45,]),'integerListInterior':([32,58,],[46,65,]),'stringExpression':([12,14,42,],[30,33,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> TXT','programme',1,'p_programme_Text','dumbo_synth.py',10),
  ('programme -> TXT programme','programme',2,'p_programme_Text','dumbo_synth.py',11),
  ('programme -> dumboBloc','programme',1,'p_programme_dumboBloc','dumbo_synth.py',19),
  ('programme -> dumboBloc programme','programme',2,'p_programme_dumboBloc','dumbo_synth.py',20),
  ('dumboBloc -> BLOC_BEGIN expressionList BLOC_END','dumboBloc',3,'p_dumboBloc_expressionList','dumbo_synth.py',28),
  ('expressionList -> expression DOT_COMMA','expressionList',2,'p_expressionList_expression','dumbo_synth.py',33),
  ('expressionList -> expression DOT_COMMA expressionList','expressionList',3,'p_expressionList_expression','dumbo_synth.py',34),
  ('expression -> variableN ASSIGNEMENT stringExpression','expression',3,'p_expression_variable','dumbo_synth.py',42),
  ('expression -> variableN ASSIGNEMENT list','expression',3,'p_expression_variable','dumbo_synth.py',43),
  ('expression -> PRINT stringExpression','expression',2,'p_expression_print','dumbo_synth.py',47),
  ('expression -> FOR variableN IN list DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',51),
  ('expression -> FOR variableN IN variable DO expressionList ENDFOR','expression',7,'p_expression_forList','dumbo_synth.py',52),
  ('expression -> IF boolean DO expressionList ENDIF','expression',5,'p_expression_boolean','dumbo_synth.py',56),
  ('expression -> IF boolean DO expressionList ELSE expressionList ENDIF','expression',7,'p_expression_boolean','dumbo_synth.py',57),
  ('stringExpression -> boolean','stringExpression',1,'p_stringExpression','dumbo_synth.py',65),
  ('stringExpression -> string','stringExpression',1,'p_stringExpression','dumbo_synth.py',66),
  ('stringExpression -> stringExpression DOT stringExpression','stringExpression',3,'p_stringExpression','dumbo_synth.py',67),
  ('list -> PAR_OUVR stringListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',75),
  ('list -> PAR_OUVR integerListInterior PAR_FERM','list',3,'p_list_int','dumbo_synth.py',76),
  ('stringListInterior -> string','stringListInterior',1,'p_stringListInterior','dumbo_synth.py',81),
  ('stringListInterior -> string COMMA stringListInterior','stringListInterior',3,'p_stringListInterior','dumbo_synth.py',82),
  ('integerListInterior -> integer','integerListInterior',1,'p_integerListInterior','dumbo_synth.py',90),
  ('integerListInterior -> integer COMMA integerListInterior','integerListInterior',3,'p_integerListInterior','dumbo_synth.py',91),
  ('variable -> VAR','variable',1,'p_variable_dico','dumbo_synth.py',100),
  ('variableN -> VAR','variableN',1,'p_variable_name','dumbo_synth.py',104),
  ('string -> APO STRING APO','string',3,'p_string_seString','dumbo_synth.py',109),
  ('integer -> integerVar','integer',1,'p_integer','dumbo_synth.py',114),
  ('integer -> variable','integer',1,'p_integer','dumbo_synth.py',115),
  ('integer -> integer ADD_OP integer','integer',3,'p_integer','dumbo_synth.py',116),
  ('integer -> integer MUL_OP integer','integer',3,'p_integer','dumbo_synth.py',117),
  ('integerVar -> INTEGER','integerVar',1,'p_integerVar','dumbo_synth.py',125),
  ('boolean -> booleanVar','boolean',1,'p_boolean','dumbo_synth.py',130),
  ('boolean -> booleanOP','boolean',1,'p_boolean','dumbo_synth.py',131),
  ('boolean -> boolean BINOPERATOR boolean','boolean',3,'p_boolean','dumbo_synth.py',132),
  ('booleanOP -> integer OPERATOR integer','booleanOP',3,'p_booleanOP','dumbo_synth.py',140),
  ('booleanOP -> integer','booleanOP',1,'p_booleanOP','dumbo_synth.py',141),
  ('booleanVar -> BOOLEAN','booleanVar',1,'p_booleanVar','dumbo_synth.py',149),
]
